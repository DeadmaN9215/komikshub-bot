import os
import sqlite3
import asyncio
import requests  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fuzzywuzzy import fuzz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()

class AddCharacterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_publisher = State()
    waiting_for_universe = State()
    waiting_for_type = State()
    waiting_for_description = State()
    waiting_for_post_link = State()
    waiting_for_art_link = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Mail.ru Cloud
DATABASE_URL = "https://cloud.mail.ru/public/XXXX/YYYY"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞
print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞...")
try:
    response = requests.get(DATABASE_URL)
    with open('comics_characters.db', 'wb') as f:
        f.write(response.content)
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
try:
    conn = sqlite3.connect('comics_characters.db')
    cursor = conn.cursor()
    conn.execute('PRAGMA encoding = "UTF-8";')
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã characters...")
try:
    cursor.execute('''CREATE TABLE IF NOT EXISTS characters
                   (name TEXT, publisher TEXT, universe TEXT, type TEXT, description TEXT, post_link TEXT, art_link TEXT)''')
    print("–¢–∞–±–ª–∏—Ü–∞ characters —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def ensure_database_populated():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        cursor.execute("SELECT * FROM characters")
        results = cursor.fetchall()
        print(f"–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ: {results}")
        if not results:
            print("–í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                           ("–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä", "Marvel", "Marvel Noir", "–ì–µ—Ä–æ–π",
                            "–ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö, –º—Å—Ç–∏—Ç–µ–ª—å —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º.",
                            "https://t.me/KomicsHub/3", "https://t.me/KomicsHub/4"))
            cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                           ("–°–ø–∞—É–Ω", "Image", "Spawn Universe", "–ê–Ω—Ç–∏–≥–µ—Ä–æ–π",
                            "–≠–ª –°–∏–º–º–æ–Ω—Å, –Ω–∞–µ–º–Ω–∏–∫, —Å—Ç–∞–≤—à–∏–π –º—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–∞ —Å —Ü–µ–ø—è–º–∏.",
                            "https://t.me/komikshub/post2", "https://example.com/art2.jpg"))
            conn.commit()
            print("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ensure_database_populated()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
    [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await message.reply("ü¶∏ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö–æ–º–∏–∫—Å–•–∞–±! –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–µ—Ä–æ–µ–≤ –∫–æ–º–∏–∫—Å–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
@dp.message(Command(commands=["cancel"]))
async def cancel(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    await message.reply("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query()
async def handle_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
    await callback_query.answer()

    if data == "search":
        await callback_query.message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
        await state.set_state(SearchStates.waiting_for_query)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
    elif data == "random":
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        ensure_database_populated()  # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        cursor.execute("SELECT * FROM characters ORDER BY RANDOM() LIMIT 1")
        result = cursor.fetchone()
        if result:
            name, publisher, universe, type_, desc, link, art = result
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await callback_query.message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω: {name}")
        else:
            await callback_query.message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. üòî")
            print("–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
@dp.message(SearchStates.waiting_for_query)
async def handle_search_query(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_query")
    query = message.text.lower().strip().replace("-", " ").replace("  ", " ")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    query_parts = query.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {query} (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏: {query_parts})")

    # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    ensure_database_populated()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM characters")
    all_characters = cursor.fetchall()
    print(f"–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –±–∞–∑–µ: {all_characters}")
    results = []

    # –ù–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for character in all_characters:
        name, publisher, universe, type_, desc, link, art = character
        combined_text = f"{name} {publisher} {universe} {type_}".lower()
        max_score = 0
        for part in query_parts:
            score = fuzz.partial_ratio(part, combined_text)
            print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º '{part}' —Å '{combined_text}': score={score}")
            if score > max_score:
                max_score = score
        if max_score >= 50:  # –ü–æ—Ä–æ–≥ —É–∂–µ —Å–Ω–∏–∂–µ–Ω –¥–æ 50
            results.append(character)
            print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} –Ω–∞–π–¥–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ {max_score}%")

    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")

    if results:
        if len(results) == 1:
            name, publisher, universe, type_, desc, link, art = results[0]
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω 1 –ø–µ—Ä—Å–æ–Ω–∞–∂: {name}")
        else:
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{result[0]} ({result[1]})", callback_data=f"select_{result[0]}")] for result in results
            ])
            await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:", reply_markup=buttons)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {[result[0] for result in results]}")
    else:
        await message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å. üòé")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.clear()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data.startswith("select_"))
async def handle_selection(callback_query: types.CallbackQuery):
    selected_name = callback_query.data.split("_", 1)[1]  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º split, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {selected_name}")
    try:
        # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        ensure_database_populated()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        cursor.execute("SELECT * FROM characters")
        all_characters = cursor.fetchall()
        print(f"–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º: {all_characters}")

        # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        cursor.execute("SELECT * FROM characters WHERE name = ?", (selected_name,))
        result = cursor.fetchone()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {result}")
        if result:
            name, publisher, universe, type_, desc, link, art = result
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            try:
                await callback_query.message.reply(
                    f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                    reply_markup=buttons
                )
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as send_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {send_error}")
                await callback_query.message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {send_error}")
        else:
            await callback_query.message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. üòî")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂ {selected_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as db_error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç: {message.text}")
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type in ["group", "supergroup"]:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {message.text}")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞: {message.text}")
    await message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
    await state.set_state(SearchStates.waiting_for_query)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks Render
async def handle_health(request):
    return web.Response(text="The bot is running fine :)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
web_app = web.Application()
web_app.add_routes([web.get('/healthcheck', handle_health)])

# –ó–∞–ø—É—Å–∫ polling –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    print("–í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP server running on http://0.0.0.0:{port}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())