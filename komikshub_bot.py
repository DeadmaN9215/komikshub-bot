import os
import sqlite3
import asyncio
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fuzzywuzzy import fuzz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()

class AddCharacterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_publisher = State()
    waiting_for_universe = State()
    waiting_for_type = State()
    waiting_for_description = State()
    waiting_for_post_link = State()
    waiting_for_art_link = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
try:
    conn = sqlite3.connect('comics_characters.db')
    cursor = conn.cursor()
    conn.execute('PRAGMA encoding = "UTF-8";')
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã characters...")
try:
    cursor.execute('''CREATE TABLE IF NOT EXISTS characters
                   (name TEXT, publisher TEXT, universe TEXT, type TEXT, description TEXT, post_link TEXT, art_link TEXT)''')
    print("–¢–∞–±–ª–∏—Ü–∞ characters —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
print("–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã characters...")
try:
    cursor.execute("DELETE FROM characters")
    print("–¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
print("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É...")
try:
    cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                   ("–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä", "Marvel", "Marvel Noir", "–ì–µ—Ä–æ–π",
                    "–ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö, –º—Å—Ç–∏—Ç–µ–ª—å —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º.",
                    "https://t.me/KomicsHub/3", "https://t.me/KomicsHub/4"))
    cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                   ("–°–ø–∞—É–Ω", "Image", "Spawn Universe", "–ê–Ω—Ç–∏–≥–µ—Ä–æ–π",
                    "–≠–ª –°–∏–º–º–æ–Ω—Å, –Ω–∞–µ–º–Ω–∏–∫, —Å—Ç–∞–≤—à–∏–π –º—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–∞ —Å —Ü–µ–ø—è–º–∏.",
                    "https://t.me/komikshub/post2", "https://example.com/art2.jpg"))
    conn.commit()
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
try:
    cursor.execute("SELECT * FROM characters")
    results = cursor.fetchall()
    print(f"–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ: {results}")
    if not results:
        print("–í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞!")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
    [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random")],
    [InlineKeyboardButton(text="‚öîÔ∏è –ö—Ä–æ—Å—Å–æ–≤–µ—Ä", callback_data="crossover")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await message.reply("ü¶∏ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö–æ–º–∏–∫—Å–•–∞–±! –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–µ—Ä–æ–µ–≤ –∫–æ–º–∏–∫—Å–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
@dp.message(Command(commands=["cancel"]))
async def cancel(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    await message.reply("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üòä")

# –ö–æ–º–∞–Ω–¥–∞ /addcharacter (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command(commands=["addcharacter"]))
async def add_character_start(message: types.Message, state: FSMContext):
    admin_id = 376742720  # –¢–≤–æ–π Telegram ID
    if message.from_user.id != admin_id:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addcharacter, –Ω–æ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /addcharacter –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AddCharacterStates.waiting_for_name)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(AddCharacterStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(AddCharacterStates.waiting_for_publisher)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–∑–¥–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Marvel):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–¥–∞—Ç–µ–ª—è
@dp.message(AddCharacterStates.waiting_for_publisher)
async def process_publisher(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    publisher = message.text.strip()
    await state.update_data(publisher=publisher)
    await state.set_state(AddCharacterStates.waiting_for_universe)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Marvel Noir):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
@dp.message(AddCharacterStates.waiting_for_universe)
async def process_universe(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    universe = message.text.strip()
    await state.update_data(universe=universe)
    await state.set_state(AddCharacterStates.waiting_for_type)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–µ—Ä–æ–π, –ê–Ω—Ç–∏–≥–µ—Ä–æ–π, –ó–ª–æ–¥–µ–π):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
@dp.message(AddCharacterStates.waiting_for_type)
async def process_type(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    type_ = message.text.strip()
    await state.update_data(type=type_)
    await state.set_state(AddCharacterStates.waiting_for_description)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö...):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(AddCharacterStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    description = message.text.strip()
    await state.update_data(description=description)
    await state.set_state(AddCharacterStates.waiting_for_post_link)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/KomicsHub/3):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
@dp.message(AddCharacterStates.waiting_for_post_link)
async def process_post_link(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    post_link = message.text.strip()
    await state.update_data(post_link=post_link)
    await state.set_state(AddCharacterStates.waiting_for_art_link)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com/art.jpg):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(AddCharacterStates.waiting_for_art_link)
async def process_art_link(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    art_link = message.text.strip()
    data = await state.get_data()
    name = data["name"]
    publisher = data["publisher"]
    universe = data["universe"]
    type_ = data["type"]
    description = data["description"]
    post_link = data["post_link"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                       (name, publisher, universe, type_, description, post_link, art_link))
        conn.commit()
        await message.reply(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {name}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query()
async def handle_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
    await callback_query.answer()

    if data == "search":
        await callback_query.message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
        await state.set_state(SearchStates.waiting_for_query)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
    elif data == "random":
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        cursor.execute("SELECT * FROM characters ORDER BY RANDOM() LIMIT 1")
        result = cursor.fetchone()
        if result:
            name, publisher, universe, type_, desc, link, art = result
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await callback_query.message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω: {name}")
        else:
            await callback_query.message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. üòî")
            print("–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
    elif data == "crossover":
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä...")
        cursor.execute("SELECT * FROM characters ORDER BY RANDOM() LIMIT 2")
        fighters = cursor.fetchall()
        if len(fighters) == 2:
            fighter1, fighter2 = fighters[0], fighters[1]
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=fighter1[0], callback_data=f"vote_{fighter1[0]}"),
                 InlineKeyboardButton(text=fighter2[0], callback_data=f"vote_{fighter2[0]}")]
            ])
            await callback_query.message.reply(
                f"‚öîÔ∏è –ö—Ä–æ—Å—Å–æ–≤–µ—Ä: {fighter1[0]} vs. {fighter2[0]} ‚Äî –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç? üòà",
                reply_markup=buttons
            )
            print(f"–ö—Ä–æ—Å—Å–æ–≤–µ—Ä —Å–æ–∑–¥–∞–Ω: {fighter1[0]} vs. {fighter2[0]}")
        else:
            await callback_query.message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π! üòî")
            print("–ö—Ä–æ—Å—Å–æ–≤–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ
@dp.callback_query(lambda c: c.data.startswith("vote_"))
async def process_vote(callback_query: types.CallbackQuery):
    winner = callback_query.data.split("_")[1]
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ {winner}")
    await callback_query.message.reply(f"–¢—ã –≤—ã–±—Ä–∞–ª {winner}! –°–ø–∞—Å–∏–±–æ –∑–∞ –≥–æ–ª–æ—Å! üèÜ")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
@dp.message(SearchStates.waiting_for_query)
async def handle_search_query(message: types.Message, state: FSMContext):
    query = message.text.lower().strip().replace("-", " ").replace("  ", " ")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    query_parts = query.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {query} (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏: {query_parts})")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM characters")
    all_characters = cursor.fetchall()
    results = []

    # –ù–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for character in all_characters:
        name, publisher, universe, type_, desc, link, art = character
        combined_text = f"{name} {publisher} {universe} {type_}".lower()
        max_score = 0
        for part in query_parts:
            score = fuzz.partial_ratio(part, combined_text)
            if score > max_score:
                max_score = score
        if max_score >= 70:
            results.append(character)
            print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} –Ω–∞–π–¥–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ {max_score}%")

    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")

    if results:
        if len(results) == 1:
            name, publisher, universe, type_, desc, link, art = results[0]
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω 1 –ø–µ—Ä—Å–æ–Ω–∞–∂: {name}")
        else:
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{result[0]} ({result[1]})", callback_data=f"select_{result[0]}")] for result in results
            ])
            await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:", reply_markup=buttons)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {[result[0] for result in results]}")
    else:
        await message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å. üòé")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")

    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Å—Ç–∞—ë—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data.startswith("select_"))
async def handle_selection(callback_query: types.CallbackQuery):
    selected_name = callback_query.data.split("_")[1]
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {selected_name}")
    cursor.execute("SELECT * FROM characters WHERE name = ?", (selected_name,))
    result = cursor.fetchone()
    if result:
        name, publisher, universe, type_, desc, link, art = result
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
        ])
        await callback_query.message.reply(
            f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
            reply_markup=buttons
        )
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã)
@dp.message(lambda message: message.reply_to_message is not None and message.chat.type in ["group", "supergroup"])
async def handle_comment(message: types.Message, state: FSMContext):
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.id:
        query = message.text.lower().strip().replace("-", " ").replace("  ", " ")
        query_parts = query.split()
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ: {query} (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏: {query_parts})")

        cursor.execute("SELECT * FROM characters")
        all_characters = cursor.fetchall()
        results = []

        for character in all_characters:
            name, publisher, universe, type_, desc, link, art = character
            combined_text = f"{name} {publisher} {universe} {type_}".lower()
            max_score = 0
            for part in query_parts:
                score = fuzz.partial_ratio(part, combined_text)
                if score > max_score:
                    max_score = score
            if max_score >= 70:
                results.append(character)
                print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} –Ω–∞–π–¥–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ {max_score}%")

        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")

        if results:
            if len(results) == 1:
                name, publisher, universe, type_, desc, link, art = results[0]
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
                ])
                await message.reply(
                    f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                    reply_markup=buttons, reply_to_message_id=message.message_id
                )
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω 1 –ø–µ—Ä—Å–æ–Ω–∞–∂: {name}")
            else:
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"{result[0]} ({result[1]})", callback_data=f"select_{result[0]}")] for result in results
                ])
                await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:",
                                   reply_markup=buttons, reply_to_message_id=message.message_id)
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {[result[0] for result in results]}")
        else:
            await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–∫–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –Ω–µ—Ç. üòî",
                               reply_to_message_id=message.message_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
    else:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º: {message.text}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    if message.chat.type in ["group", "supergroup"]:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {message.text}")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞: {message.text}")
    await message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
    await state.set_state(SearchStates.waiting_for_query)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks Render
async def handle_health(request):
    return web.Response(text="The bot is running fine :)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
web_app = web.Application()
web_app.add_routes([web.get('/healthcheck', handle_health)])

# –ó–∞–ø—É—Å–∫ polling –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP server running on http://0.0.0.0:{port}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())