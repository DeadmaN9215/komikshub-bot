import os
import sqlite3
import asyncio
import requests
from webdav3.client import Client  # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è WebDAV
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fuzzywuzzy import fuzz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SearchStates(StatesGroup):
    waiting_for_query = State()

class AddCharacterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_publisher = State()
    waiting_for_universe = State()
    waiting_for_type = State()
    waiting_for_description = State()
    waiting_for_post_link = State()
    waiting_for_art_link = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
dp = Dispatcher()

# –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Mail.ru Cloud
DATABASE_URL = "https://cloud.mail.ru/public/3VX7/ppkUqGWHF"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebDAV –¥–ª—è Mail.ru Cloud
webdav_options = {
    'webdav_hostname': "https://webdav.cloud.mail.ru",
    'webdav_login': "deadman_15@mail.ru",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π email
    'webdav_password': "XkxpTJwpN3ifucfSAh6v"     # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è WebDAV
}
webdav_client = Client(webdav_options)

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞
print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞...")
database_file = 'comics_characters.db'
try:
    response = requests.get(DATABASE_URL)
    with open(database_file, 'wb') as f:
        f.write(response.content)
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_database():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        temp_conn = sqlite3.connect(database_file)
        temp_cursor = temp_conn.cursor()
        temp_cursor.execute("SELECT * FROM sqlite_master WHERE type='table';")
        temp_conn.close()
        print("–§–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.")
    except sqlite3.DatabaseError as e:
        print(f"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–∑—É, –µ—Å–ª–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        with open(database_file, 'wb') as f:
            pass  # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª
        temp_conn = sqlite3.connect(database_file)
        temp_cursor = temp_conn.cursor()
        temp_cursor.execute('''CREATE TABLE IF NOT EXISTS characters
                              (name TEXT, publisher TEXT, universe TEXT, type TEXT, description TEXT, post_link TEXT, art_link TEXT)''')
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        temp_cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                            ("–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä", "Marvel", "Marvel Noir", "–ì–µ—Ä–æ–π",
                             "–ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö, –º—Å—Ç–∏—Ç–µ–ª—å —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º.",
                             "https://t.me/KomicsHub/3", "https://t.me/KomicsHub/4"))
        temp_cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                            ("–°–ø–∞—É–Ω", "Image", "Spawn Universe", "–ê–Ω—Ç–∏–≥–µ—Ä–æ–π",
                             "–≠–ª –°–∏–º–º–æ–Ω—Å, –Ω–∞–µ–º–Ω–∏–∫, —Å—Ç–∞–≤—à–∏–π –º—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–∞ —Å —Ü–µ–ø—è–º–∏.",
                             "https://t.me/komikshub/post2", "https://example.com/art2.jpg"))
        temp_conn.commit()
        temp_conn.close()
        print("–ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –≤ –æ–±–ª–∞–∫–æ
        upload_database_to_cloud()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
try:
    conn = sqlite3.connect(database_file)
    cursor = conn.cursor()
    conn.execute('PRAGMA encoding = "UTF-8";')
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã characters...")
try:
    cursor.execute('''CREATE TABLE IF NOT EXISTS characters
                   (name TEXT, publisher TEXT, universe TEXT, type TEXT, description TEXT, post_link TEXT, art_link TEXT)''')
    print("–¢–∞–±–ª–∏—Ü–∞ characters —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def ensure_database_populated():
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        cursor.execute("SELECT * FROM characters")
        results = cursor.fetchall()
        print(f"–î–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ: {results}")
        if not results:
            print("–í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞! –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                           ("–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä", "Marvel", "Marvel Noir", "–ì–µ—Ä–æ–π",
                            "–ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö, –º—Å—Ç–∏—Ç–µ–ª—å —Å —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º.",
                            "https://t.me/KomicsHub/3", "https://t.me/KomicsHub/4"))
            cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                           ("–°–ø–∞—É–Ω", "Image", "Spawn Universe", "–ê–Ω—Ç–∏–≥–µ—Ä–æ–π",
                            "–≠–ª –°–∏–º–º–æ–Ω—Å, –Ω–∞–µ–º–Ω–∏–∫, —Å—Ç–∞–≤—à–∏–π –º—Å—Ç–∏—Ç–µ–ª–µ–º –∞–¥–∞ —Å —Ü–µ–ø—è–º–∏.",
                            "https://t.me/komikshub/post2", "https://example.com/art2.jpg"))
            conn.commit()
            print("–ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            upload_database_to_cloud()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ
def upload_database_to_cloud():
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ...")
    try:
        webdav_client.upload_sync(remote_path="/BDCharter/comics_characters.db", local_path="comics_characters.db")
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –æ–±–ª–∞–∫–æ.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ: {e}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
initialize_database()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")],
    [InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random")]
])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await message.reply("ü¶∏ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö–æ–º–∏–∫—Å–•–∞–±! –ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–µ—Ä–æ–µ–≤ –∫–æ–º–∏–∫—Å–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)

# –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
@dp.message(Command(commands=["cancel"]))
async def cancel(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /cancel –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await state.clear()
    await message.reply("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üòä")

# –ö–æ–º–∞–Ω–¥–∞ /addcharacter (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command(commands=["addcharacter"]))
async def add_character_start(message: types.Message, state: FSMContext):
    admin_id = 376742720  # –¢–≤–æ–π Telegram ID
    if message.from_user.id != admin_id:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /addcharacter, –Ω–æ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /addcharacter –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AddCharacterStates.waiting_for_name)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫ –ù—É–∞—Ä):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(AddCharacterStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    name = message.text.strip()
    await state.update_data(name=name)
    await state.set_state(AddCharacterStates.waiting_for_publisher)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–∑–¥–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Marvel):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–¥–∞—Ç–µ–ª—è
@dp.message(AddCharacterStates.waiting_for_publisher)
async def process_publisher(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    publisher = message.text.strip()
    await state.update_data(publisher=publisher)
    await state.set_state(AddCharacterStates.waiting_for_universe)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Marvel Noir):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π
@dp.message(AddCharacterStates.waiting_for_universe)
async def process_universe(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    universe = message.text.strip()
    await state.update_data(universe=universe)
    await state.set_state(AddCharacterStates.waiting_for_type)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ì–µ—Ä–æ–π, –ê–Ω—Ç–∏–≥–µ—Ä–æ–π, –ó–ª–æ–¥–µ–π):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
@dp.message(AddCharacterStates.waiting_for_type)
async def process_type(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    type_ = message.text.strip()
    await state.update_data(type=type_)
    await state.set_state(AddCharacterStates.waiting_for_description)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú—Ä–∞—á–Ω—ã–π –ü–∏—Ç–µ—Ä –ü–∞—Ä–∫–µ—Ä –∏–∑ 1930-—Ö...):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(AddCharacterStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    description = message.text.strip()
    await state.update_data(description=description)
    await state.set_state(AddCharacterStates.waiting_for_post_link)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/KomicsHub/3):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
@dp.message(AddCharacterStates.waiting_for_post_link)
async def process_post_link(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    post_link = message.text.strip()
    await state.update_data(post_link=post_link)
    await state.set_state(AddCharacterStates.waiting_for_art_link)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com/art.jpg):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—Ä—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(AddCharacterStates.waiting_for_art_link)
async def process_art_link(message: types.Message, state: FSMContext):
    admin_id = 376742720
    if message.from_user.id != admin_id:
        return

    art_link = message.text.strip()
    data = await state.get_data()
    name = data["name"]
    publisher = data["publisher"]
    universe = data["universe"]
    type_ = data["type"]
    description = data["description"]
    post_link = data["post_link"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        cursor.execute("INSERT INTO characters VALUES (?, ?, ?, ?, ?, ?, ?)",
                       (name, publisher, universe, type_, description, post_link, art_link))
        conn.commit()
        await message.reply(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ")
        print(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {name}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–ª–∞–∫–æ
        upload_database_to_cloud()
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}: {e}")

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.callback_query()
async def handle_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
    await callback_query.answer()

    if data == "search":
        await callback_query.message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
        await state.set_state(SearchStates.waiting_for_query)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")
    elif data == "random":
        print(f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...")
        ensure_database_populated()  # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        cursor.execute("SELECT * FROM characters ORDER BY RANDOM() LIMIT 1")
        result = cursor.fetchone()
        if result:
            name, publisher, universe, type_, desc, link, art = result
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await callback_query.message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞–π–¥–µ–Ω: {name}")
        else:
            await callback_query.message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. üòî")
            print("–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö)
@dp.message(SearchStates.waiting_for_query)
async def handle_search_query(message: types.Message, state: FSMContext):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_query")
    query = message.text.lower().strip().replace("-", " ").replace("  ", " ")  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
    query_parts = query.split()  # –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ–≤–∞
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {query} (—Ä–∞–∑–±–∏—Ç –Ω–∞ —á–∞—Å—Ç–∏: {query_parts})")

    # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
    ensure_database_populated()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT * FROM characters")
    all_characters = cursor.fetchall()
    print(f"–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –±–∞–∑–µ: {all_characters}")
    results = []

    # –ù–µ—á—ë—Ç–∫–∏–π –ø–æ–∏—Å–∫: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for character in all_characters:
        name, publisher, universe, type_, desc, link, art = character
        combined_text = f"{name} {publisher} {universe} {type_}".lower()
        max_score = 0
        for part in query_parts:
            score = fuzz.partial_ratio(part, combined_text)
            print(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º '{part}' —Å '{combined_text}': score={score}")
            if score > max_score:
                max_score = score
        if max_score >= 50:  # –ü–æ—Ä–æ–≥ —É–∂–µ —Å–Ω–∏–∂–µ–Ω –¥–æ 50
            results.append(character)
            print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {name} –Ω–∞–π–¥–µ–Ω —Å —É—Ä–æ–≤–Ω–µ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ {max_score}%")

    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")

    if results:
        if len(results) == 1:
            name, publisher, universe, type_, desc, link, art = results[0]
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            await message.reply(
                f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                reply_markup=buttons
            )
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω 1 –ø–µ—Ä—Å–æ–Ω–∞–∂: {name}")
        else:
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{result[0]} ({result[1]})", callback_data=f"select_{result[0]}")] for result in results
            ])
            await message.reply("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ:", reply_markup=buttons)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {[result[0] for result in results]}")
    else:
        await message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å. üòé")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.clear()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(lambda c: c.data.startswith("select_"))
async def handle_selection(callback_query: types.CallbackQuery):
    selected_name = callback_query.data.split("_", 1)[1]  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º split, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–º–µ–Ω–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {selected_name}")
    try:
        # –ü–µ—Ä–µ–∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        ensure_database_populated()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        cursor.execute("SELECT * FROM characters")
        all_characters = cursor.fetchall()
        print(f"–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –±–∞–∑–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º: {all_characters}")

        # –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        cursor.execute("SELECT * FROM characters WHERE name = ?", (selected_name,))
        result = cursor.fetchone()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {result}")
        if result:
            name, publisher, universe, type_, desc, link, art = result
            buttons = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ê—Ä—Ç", url=art)]
            ])
            try:
                await callback_query.message.reply(
                    f"ü¶∏ {name}\nüìö –ò–∑–¥–∞—Ç–µ–ª—å: {publisher}\nüåå –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}\nü¶∏ –¢–∏–ø: {type_}\nüìñ {desc}\nüìú –ü–æ—Å—Ç: {link}",
                    reply_markup=buttons
                )
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ {name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as send_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {send_error}")
                await callback_query.message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {send_error}")
        else:
            await callback_query.message.reply("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. üòî")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id}: –ø–µ—Ä—Å–æ–Ω–∞–∂ {selected_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as db_error:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç: {message.text}")
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type in ["group", "supergroup"]:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {message.text}")
        return

    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞: {message.text}")
    await message.reply("–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—É–∫, –Ω—É–∞—Ä, Marvel):")
    await state.set_state(SearchStates.waiting_for_query)
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞")

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks Render
async def handle_health(request):
    return web.Response(text="The bot is running fine :)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
web_app = web.Application()
web_app.add_routes([web.get('/healthcheck', handle_health)])

# –ó–∞–ø—É—Å–∫ polling –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞...")
    await bot.delete_webhook(drop_pending_updates=True)
    print("–í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")

    # –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks
    runner = web.AppRunner(web_app)
    await runner.setup()
    port = int(os.getenv("PORT", 8000))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    print(f"HTTP server running on http://0.0.0.0:{port}")

    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())